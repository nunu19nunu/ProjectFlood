import streamlit as st
import joblib
import pandas as pd

model = joblib.load('randomforestv2.pkl')  # Load your model file

selected_columns = {'flooding' :'‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°‡∏Ç‡∏±‡∏á', 'overflow':'‡∏ô‡πâ‡∏≥‡∏•‡πâ‡∏ô‡∏ï‡∏•‡∏¥‡πà‡∏á', 'flashflood':'‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°‡∏â‡∏±‡∏ö‡∏û‡∏•‡∏±‡∏ô', 'feq2':'2 ‡∏õ‡∏µ‡∏Ñ‡∏£‡∏±‡πâ‡∏á', 'feq3':'3 ‡∏õ‡∏µ‡∏Ñ‡∏£‡∏±‡πâ‡∏á', 'feq4':'4 ‡∏õ‡∏µ‡∏Ñ‡∏£‡∏±‡πâ‡∏á', 'house':'‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ó‡πà‡∏ß‡∏°‡∏ö‡πâ‡∏≤‡∏ô',
                    'habitable':'‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏ï‡πà‡∏≠‡∏≤‡∏®‡∏±‡∏¢‡πÑ‡∏î‡πâ', 'evacuated':'‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°‡∏ö‡πâ‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏û‡∏¢‡∏û', 'transportation':'‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Ñ‡∏°‡∏ô‡∏≤‡∏Ñ‡∏°', 'benefit':'‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå', 'area':'‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£', 'fishing':'‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏á', 'Jan':'‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', 'Feb':'‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', 'Mar':'‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°',
                    'Apr':'‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', 'May':'‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', 'Jun':'‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô', 'Jul':'‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', 'Aug':'‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', 'Sep':'‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', 'Oct':'‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', 'Nov':'‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', 'Dec':'‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'}

link_mapping = {
    1: "https://kbi.disaster.go.th/krabi/home",
    2: "https://cpn.disaster.go.th/CPN/home",
    3: "https://trg.disaster.go.th/TRANG/home",
    4: "https://nrt.disaster.go.th/nst/home",
    5: "https://nrt.disaster.go.th/nst/home",
    6: "https://ptn.disaster.go.th/ptn/home",
    7: "https://pna.disaster.go.th/png/home",
    8: "https://plg.disaster.go.th/plg/home",
    9: "https://pkt.disaster.go.th/pkt/home",
    10: "https://yla.disaster.go.th/yala/home",
    11: "https://rng.disaster.go.th/RANONG/home",
    12: "https://ska.disaster.go.th/dpmsk/home",
    13: "https://stn.disaster.go.th/satun/home",
    14: "https://sni.disaster.go.th/SNI/home"





}
province_mapping = {
    1: "‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà",
    2: "‡∏ä‡∏∏‡∏°‡∏û‡∏£",
    3: "‡∏ï‡∏£‡∏±‡∏á",
    4: "‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏ä",
    5: "‡∏ô‡∏£‡∏≤‡∏ò‡∏¥‡∏ß‡∏≤‡∏™",
    6: "‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ",
    7: "‡∏û‡∏±‡∏á‡∏á‡∏≤",
    8: "‡∏û‡∏±‡∏ó‡∏•‡∏∏‡∏á",
    9: "‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï",
    10: "‡∏¢‡∏∞‡∏•‡∏≤",
    11: "‡∏£‡∏∞‡∏ô‡∏≠‡∏á",
    12: "‡∏™‡∏á‡∏Ç‡∏•‡∏≤",
    13: "‡∏™‡∏ï‡∏π‡∏•",
    14: "‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ"
}

def get_key_by_value(dictionary, value):
    for key, val in dictionary.items():
        if val == value:
            return key
    return None  # If the value is not found

def predict_province_result(input_data):

    prediction = model.predict(input_data)
    predicted_class = prediction[0]

    risk_level_labels = {
        1: '‡∏ï‡πà‡∏≥‡∏°‡∏≤‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏•‡∏¢ ',
        2: '‡∏ï‡πà‡∏≥ ',
        3: '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á ',
        4: '‡∏™‡∏π‡∏á! ',
        5: '‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å!! '
    }
    predicted_risk_level = risk_level_labels[predicted_class]

    return predicted_risk_level


def main():
    st.title("‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏≠‡∏∏‡∏ó‡∏Å‡∏†‡∏±‡∏¢‡πÉ‡∏ô‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ :rain_cloud::lightning_cloud:")

    st.caption("‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ‡∏Å‡∏£‡∏°‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏£‡πÄ‡∏ó‡∏≤‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏†‡∏±‡∏¢")

    input_features = {}

    # User input
    province_input = st.selectbox("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î:", ["‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î"] + list(province_mapping.values()))
    input_features['province'] = get_key_by_value(province_mapping, province_input)



    binary_labels = {
        1: "‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô",
        0: "‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô"
    }

    st.subheader("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡∏≠‡∏∏‡∏ó‡∏Å‡∏†‡∏±‡∏¢", divider='rainbow')
    for column in selected_columns:
        if selected_columns[column] in ['‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°‡∏Ç‡∏±‡∏á', '‡∏ô‡πâ‡∏≥‡∏•‡πâ‡∏ô‡∏ï‡∏•‡∏¥‡πà‡∏á', '‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°‡∏â‡∏±‡∏ö‡∏û‡∏•‡∏±‡∏ô']:

            option_input = st.radio(f'{selected_columns[column]}', list(binary_labels.values()), index=None, key=column)
            input_features[column] = get_key_by_value(binary_labels, option_input)
            if selected_columns[column] == "‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°‡∏â‡∏±‡∏ö‡∏û‡∏•‡∏±‡∏ô":
                st.subheader("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡∏≠‡∏∏‡∏ó‡∏Å‡∏†‡∏±‡∏¢", divider='rainbow')


        if selected_columns[column] in ["2 ‡∏õ‡∏µ‡∏Ñ‡∏£‡∏±‡πâ‡∏á","3 ‡∏õ‡∏µ‡∏Ñ‡∏£‡∏±‡πâ‡∏á", "4 ‡∏õ‡∏µ‡∏Ñ‡∏£‡∏±‡πâ‡∏á"]:
            option_input = st.radio(f'{selected_columns[column]}', list(binary_labels.values()), index=None, key=column)
            input_features[column] = get_key_by_value(binary_labels, option_input)
            if selected_columns[column] == "4 ‡∏õ‡∏µ‡∏Ñ‡∏£‡∏±‡πâ‡∏á":
                st.subheader("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡∏≠‡∏∏‡∏ó‡∏Å‡∏†‡∏±‡∏¢", divider='rainbow')

        elif selected_columns[column] in ["‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ó‡πà‡∏ß‡∏°‡∏ö‡πâ‡∏≤‡∏ô","‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏ï‡πà‡∏≠‡∏≤‡∏®‡∏±‡∏¢‡πÑ‡∏î‡πâ", "‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°‡∏ö‡πâ‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏û‡∏¢‡∏û"]:
            option_input = st.radio(f'{selected_columns[column]}', list(binary_labels.values()), index=None, key=column)
            input_features[column] = get_key_by_value(binary_labels, option_input)
            if selected_columns[column] == "‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°‡∏ö‡πâ‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏û‡∏¢‡∏û":
                st.subheader("‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡∏≠‡∏∏‡∏ó‡∏Å‡∏†‡∏±‡∏¢", divider='rainbow')

        elif selected_columns[column] in ["‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Ñ‡∏°‡∏ô‡∏≤‡∏Ñ‡∏°",'‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå', '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£','‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏á']:
            option_input = st.radio(f'{selected_columns[column]}', list(binary_labels.values()), index=None, key=column)
            input_features[column] = get_key_by_value(binary_labels, option_input)
            if selected_columns[column] == "‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏á":
                st.subheader("‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏Å‡∏¥‡∏î‡∏≠‡∏∏‡∏ó‡∏Å‡∏†‡∏±‡∏¢", divider='rainbow')


            col1, col2, col3 = st.columns(3)
        elif selected_columns[column] in ["‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô"]:
            with col1:
                option_input = st.radio(f'{selected_columns[column]}', list(binary_labels.values()), index=None,
                                        key=column)
                input_features[column] = get_key_by_value(binary_labels, option_input)

        elif selected_columns[column] in ["‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°","‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô", "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°"]:
            with col2:
                option_input = st.radio(f'{selected_columns[column]}', list(binary_labels.values()), index=None,
                                        key=column)
                input_features[column] = get_key_by_value(binary_labels, option_input)

        elif selected_columns[column] in ["‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"]:

            with col3:
                option_input = st.radio(f'{selected_columns[column]}', list(binary_labels.values()), index=None,
                                        key=column)
                input_features[column] = get_key_by_value(binary_labels, option_input)

    if st.button("‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á"):
        check = True
        # Display result
        if province_input == "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î":
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î")
        elif check == False:
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
        else:
            input_data = pd.DataFrame([input_features])
            result = predict_province_result(input_data)
            st.markdown(f"{province_input}: **‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏Å‡∏¥‡∏î‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö {result}**")
            # st.markdown(f"‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏≠‡∏∏‡∏ó‡∏Å‡∏†‡∏±‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà {link_mapping})")

        province_code = get_key_by_value(province_mapping, province_input)
        if province_code in link_mapping:
            link = link_mapping[province_code]
            st.markdown(f'''**‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏≠‡∏∏‡∏ó‡∏Å‡∏†‡∏±‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà** :
                        \n[‡∏Å‡∏£‡∏°‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏£‡πÄ‡∏ó‡∏≤‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏†‡∏±‡∏¢‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î{province_input}]({link})
                        \n **‡∏™‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô‡∏ï‡∏•‡∏≠‡∏î 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á üìû1784üö®**''')
        else:
            st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ô‡∏µ‡πâ")

if __name__ == '__main__':
    main()
